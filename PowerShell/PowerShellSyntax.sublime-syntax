%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: PowerShell
file_extensions:
  - ps1
  - psm1
  - psd1
scope: source.powershell
contexts:
  main:
    - match: "<#"
      captures:
        0: punctuation.start.definition.comment.block.powershell
      push:
        - meta_scope: comment.block.powershell
        - match: "#>"
          captures:
            0: punctuation.end.definition.comment.block.powershell
          pop: true
        - include: commentEmbeddedDocs
    - match: '(?<![`\\-])#'
      push:
        - meta_scope: comment.line.number-sign.powershell
        - match: $
          pop: true
        - include: commentEmbeddedDocs
        - include: RequiresDirective
    - match: '[2-6]>&1|>>|>|<<|<|>|>\||[1-6]>|[1-6]>>'
      scope: keyword.operator.redirection.powershell
    - include: commands
    - include: variable
    - include: interpolatedStringContent
    - include: function
    - include: attribute
    - include: UsingDirective
    - include: type
    - include: hashtable
    - match: (?<!(?<!`)")"
      push:
        - meta_scope: string.quoted.double.powershell
        - match: '"(?!")'
          pop: true
        - include: variableNoProperty
        - include: doubleQuotedStringEscapes
        - include: interpolation
        - match: '`\s*$'
          scope: keyword.other.powershell
    - include: doubleQuotedStringEscapes
    - match: (?<!')'
      push:
        - meta_scope: string.quoted.single.powershell
        - match: "'(?!')"
          pop: true
        - match: "''"
          scope: constant.character.escape.powershell
    - match: \@"(?=$)
      push:
        - meta_scope: string.quoted.double.heredoc.powershell
        - match: ^"@
          pop: true
        - include: variableNoProperty
        - include: doubleQuotedStringEscapes
        - include: interpolation
    - match: \@'(?=$)
      push:
        - meta_scope: string.quoted.single.heredoc.powershell
        - match: ^'@
          pop: true
        - match: "''"
          scope: constant.character.escape.powershell
    - include: numericConstant
    - match: '@\('
      captures:
        0: keyword.other.powershell
      push:
        - meta_scope: meta.group.array-expression.powershell
        - match: \)
          captures:
            0: keyword.other.powershell
          pop: true
        - include: main
    - match: \$\(
      comment: "TODO: move to repo; make recursive."
      captures:
        0: keyword.other.powershell
      push:
        - meta_scope: meta.group.complex.subexpression.powershell
        - match: \)
          captures:
            0: keyword.other.powershell
          pop: true
        - include: main
    - match: '(?<!\w)-([ci]?[lg][te]|eq|ne)'
      scope: keyword.operator.logical.powershell
    - match: '(\b(([A-Za-z0-9\-_\.]+)\.(?i:exe|com|cmd|bat))\b)'
      scope: support.function.powershell
    - match: (?<!\w)((?i:begin|break|catch|continue|data|define|do|dynamicparam|else|elseif|end|exit|finally|for|foreach(?!-object)|from|if|in|inlinescript|parallel|param|process|return|switch|throw|trap|try|until|var|where(?!-object)|while)|%|\?)(?!\w)
      scope: keyword.control.powershell
    - match: (?<!\w)((?i:hidden|static))(?!\w)
      comment: This should only be relevant inside a class but will require a rework of how classes are matched. This is a temp fix.
      scope: storage.modifier.powershell
    - match: '(?<!\w)((?i:class)|%|\?)(?:\s)+((?:\p{L}|\d|_|-|)+)\b'
      comment: capture should be entity.name.type, but it doesn't provide a good color in the default schema.
      captures:
        1: storage.type.powershell
        2: entity.name.function
    - match: (?<!\w)-(?i:is(?:not)?|as)\b
      scope: keyword.operator.comparison.powershell
    - match: '(?<!\w)-(?i:[ic]?(?:eq|ne|[gl][te]|(?:not)?(?:like|match|contains|in)|replace))(?!\p{L})'
      scope: keyword.operator.comparison.powershell
    - match: '(?<!\w)-(?i:join|split)(?!\p{L})|!'
      scope: keyword.operator.unary.powershell
    - match: '(?<!\w)-(?i:and|or|not|xor)(?!\p{L})|!'
      scope: keyword.operator.logical.powershell
    - match: '(?<!\w)-(?i:band|bor|bnot|bxor)(?!\p{L})'
      scope: keyword.operator.bitwise.powershell
    - match: '(?<!\w)-(?i:f)(?!\p{L})'
      scope: keyword.operator.string-format.powershell
    - match: "[+%*/-]?=|[+/*%-]"
      scope: keyword.operator.assignment.powershell
    - match: '\|{2}|&{2}|;'
      scope: keyword.other.statement-separator.powershell
    - match: '&|(?<!\w)\.(?= )|`|,|\|'
      scope: keyword.operator.other.powershell
    - match: (?<!\s|^)\.\.(?=\d|\(|\$)
      comment: This is very imprecise, is there a syntax for 'must come after...'
      scope: keyword.operator.range.powershell
  RequiresDirective:
    - match: (?<=#)(?i:(requires))\s
      captures:
        0: keyword.control.requires.powershell
      push:
        - meta_scope: meta.requires.powershell
        - match: $
          pop: true
        - match: \-(?i:Modules|PSSnapin|RunAsAdministrator|ShellId|Version)
          scope: keyword.other.powershell
        - match: '(?<!-)\b\p{L}+|\d+(?:\.\d+)*'
          scope: variable.parameter.powershell
        - include: hashtable
  UsingDirective:
    - match: (?<!\w)(?i:(using))\s+(?i:(namespace|module))\s+(?i:((?:\w+(?:\.)?)+))
      captures:
        1: keyword.control.using.powershell
        2: keyword.other.powershell
        3: variable.parameter.powershell
  attribute:
    - match: '\[(\p{L}|\.|``\d+)+(?=\()'
      captures:
        0: entity.name.tag
        1: entity.name.tag
      push:
        - match: '\]'
          captures:
            0: entity.name.tag
          pop: true
        - match: \(
          push:
            - meta_scope: entity.other.attribute-name
            - match: \)
              pop: true
            - match: '(\w+)\s*=?([^"'']*?|''[^'']*?''|"[^"]*?")?(?=,|\))'
              comment: really we should match the known attributes first
              scope: entity.other.attribute-name.powershell
              captures:
                0: entity.other.attribute.parameter.powershell
                1: constant.language.powershell
                2: variable.other.powershell
            - include: variable
  commands:
    - match: '(?:(\p{L}|\d|_|-|\\|\:)*\\)?\b(?i:Add|Approve|Assert|Backup|Block|Build|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Deploy|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Mount|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Write)\-.+?(?:\.(?i:exe|cmd|bat|ps1))?\b'
      comment: "Verb-Noun pattern:"
      scope: support.function.powershell
    - match: (?<!\w)(?i:foreach-object)(?!\w)
      comment: Builtin cmdlets with reserved verbs
      scope: support.function.powershell
    - match: (?<!\w)(?i:where-object)(?!\w)
      comment: Builtin cmdlets with reserved verbs
      scope: support.function.powershell
    - match: (?<!\w)(?i:sort-object)(?!\w)
      comment: Builtin cmdlets with reserved verbs
      scope: support.function.powershell
    - match: (?<!\w)(?i:tee-object)(?!\w)
      comment: Builtin cmdlets with reserved verbs
      scope: support.function.powershell
  commentEmbeddedDocs:
    - match: (?i:\s*(\.)(COMPONENT|DESCRIPTION|EXAMPLE|EXTERNALHELP|FORWARDHELPCATEGORY|FORWARDHELPTARGETNAME|FUNCTIONALITY|INPUTS|LINK|NOTES|OUTPUTS|REMOTEHELPRUNSPACE|ROLE|SYNOPSIS))
      scope: comment.documentation.embedded.powershell
      captures:
        1: constant.string.documentation.powershell
        2: keyword.operator.documentation.powershell
    - match: '(?i:\s*(\.)(PARAMETER|FORWARDHELPTARGETNAME|FORWARDHELPCATEGORY|REMOTEHELPRUNSPACE|EXTERNALHELP)\s+([a-z0-9-_]+))'
      scope: comment.documentation.embedded.powershell
      captures:
        1: constant.string.documentation.powershell
        2: keyword.operator.documentation.powershell
        3: keyword.operator.documentation.powershell
  doubleQuotedStringEscapes:
    - match: '`[0abnfrvt"''$`]'
      scope: constant.character.escape.powershell
    - match: '""'
      scope: constant.character.escape.powershell
  function:
    - match: '(?<!\S)(?i)(function|filter|configuration|workflow)\s+(?:(global|local|script|private):)?((?:\p{L}|\d|_|-|\.)+)'
      captures:
        0: meta.function
        1: storage.type
        2: storage.modifier.scope.powershell
        3: entity.name.function.powershell
      push:
        - match: '\{|\('
          pop: true
  hashtable:
    - match: '(@\{)'
      captures:
        1: punctuation.section.braces.begin
      push:
        - meta_scope: meta.hashtable.powershell
        - match: '(\})'
          captures:
            1: punctuation.section.braces.end
          pop: true
        - match: \b((?:\'|\")?)(\w+)((?:\'|\")?)(?:\s+)?(=)(?:\s+)?
          scope: meta.hashtable.assignment.powershell
          captures:
            1: punctuation.definition.string.begin
            2: variable.other.readwrite.powershell
            3: punctuation.definition.string.end
            4: keyword.operator.assignment.powershell
        - include: scriptblock
        - include: main
  interpolatedStringContent:
    - match: \(
      captures:
        0: keyword.other.powershell
      push:
        - meta_content_scope: interpolated.simple.source.powershell
        - match: \)
          captures:
            0: keyword.other.powershell
          pop: true
        - include: main
        - include: interpolation
        - include: interpolatedStringContent
  interpolation:
    - match: (\$)\(
      captures:
        0: keyword.other.powershell
      push:
        - meta_content_scope: interpolated.complex.source.powershell
        - match: \)
          captures:
            0: keyword.other.powershell
          pop: true
        - include: main
        - include: interpolation
        - include: interpolatedStringContent
  numericConstant:
    - match: '(?<!\w)([-+]?0(?:x|X)[0-9a-fA-F_]+(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\b'
      scope: constant.numeric.hexadecimal.powershell
      captures:
        1: constant.numeric.hexadecimal.powershell
        2: keyword.other.powershell
    - match: '(?<!\w)([-+]?(?:[0-9_]+)?\.[0-9_]+(?:(?:e|E)[0-9]+)?(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\b'
      scope: constant.numeric.scientific.powershell
      captures:
        1: constant.numeric.scientific.powershell
        2: keyword.other.powershell
    - match: '(?<!\w)([-+]?0(?:b|B)[01_]+(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\b'
      scope: constant.numeric.binary.powershell
      captures:
        1: constant.numeric.binary.powershell
        2: keyword.other.powershell
    - match: '(?<!\w)([-+]?[0-9_]+(?:e|E)(?:[0-9_])?+(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\b'
      scope: constant.numeric.decimal.powershell
      captures:
        1: constant.numeric.decimal.powershell
        2: keyword.other.powershell
    - match: '(?<!\w)([-+]?[0-9_]+\.(?:e|E)(?:[0-9_])?+(?:F|f|D|d|M|m)?)((?i:[kmgtp]b)?)\b'
      scope: constant.numeric.decimal.powershell
      captures:
        1: constant.numeric.decimal.powershell
        2: keyword.other.powershell
    - match: '(?<!\w)([-+]?[0-9_]+[\.]?(?:F|f|D|d|M|m))((?i:[kmgtp]b)?)\b'
      scope: constant.numeric.decimal.powershell
      captures:
        1: constant.numeric.decimal.powershell
        2: keyword.other.powershell
    - match: '(?<!\w)([-+]?[0-9_]+[\.]?(?:U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?)((?i:[kmgtp]b)?)\b'
      scope: constant.numeric.decimal.powershell
      captures:
        1: constant.numeric.decimal.powershell
        2: keyword.other.powershell
  scriptblock:
    - match: '\{'
      push:
        - meta_scope: meta.scriptblock.powershell
        - match: '\}'
          pop: true
        - include: main
  type:
    - match: '\['
      comment: name should be entity.name.type but default schema doesn't have a good color for it
      captures:
        0: entity.other.attribute-name
      push:
        - match: '\]'
          captures:
            0: entity.other.attribute-name
          pop: true
        - match: '(\p{L}|\.|``\d+)+?'
          scope: entity.other.attribute-name
        - include: main
  variable:
    - match: (\$)(?i:(False|Null|True))\b
      comment: These are special constants.
      captures:
        1: keyword.other.powershell
        2: constant.language.powershell
    - match: '(\$)(?i:(Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID))((?:\.(?:\p{L}|\d|_)+)*\b)?\b'
      comment: These are the other built-in constants.
      captures:
        1: keyword.other.powershell
        2: support.constant.variable.powershell
        3: entity.name.function.invocation.powershell
    - match: '(\$)(?i:(\$|\^|\?|_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This))((?:\.(?:\p{L}|\d|_)+)*\b)?\b'
      comment: Automatic variables are not constants, but they are read-only. In monokai (default) color schema support.variable doesn't have color, so we use constant.
      captures:
        1: keyword.other.powershell
        2: support.constant.automatic.powershell
        3: entity.name.function.invocation.powershell
    - match: '(\$)(?i:(ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference))((?:\.(?:\p{L}|\d|_)+)*\b)?\b'
      comment: Style preference variables as language variables so that they stand out.
      captures:
        1: keyword.other.powershell
        2: variable.language.powershell
        3: entity.name.function.invocation.powershell
    - match: '(?i:(\$|@)(global|local|private|script|using|workflow):((?:\p{L}|\d|_)+))((?:\.(?:\p{L}|\d|_)+)*\b)?'
      captures:
        1: keyword.other.powershell
        2: storage.modifier.scope.powershell
        3: variable.other.normal.powershell
        4: entity.name.function.invocation.powershell
    - match: '(?i:(\$\{)(global|local|private|script|using|workflow):([^}]*[^}`])(\}))((?:\.(?:\p{L}|\d|_)+)*\b)?'
      captures:
        1: keyword.other.powershell
        2: storage.modifier.scope.powershell
        3: variable.other.readwrite.powershell
        4: keyword.other.powershell
        5: entity.name.function.invocation.powershell
    - match: '(?i:(\$|@)((?:\p{L}|\d|_)+:)?((?:\p{L}|\d|_)+))((?:\.(?:\p{L}|\d|_)+)*\b)?'
      captures:
        1: keyword.other.powershell
        2: support.variable.drive.powershell
        3: variable.other.readwrite.powershell
        4: entity.name.function.invocation.powershell
    - match: '(?i:(\$\{)((?:\p{L}|\d|_)+:)?([^}]*[^}`])(\}))((?:\.(?:\p{L}|\d|_)+)*\b)?'
      captures:
        1: keyword.other.powershell
        2: support.variable.drive.powershell
        3: variable.other.readwrite.powershell
        4: keyword.other.powershell
        5: entity.name.function.invocation.powershell
  variableNoProperty:
    - match: (\$)(?i:(False|Null|True))\b
      comment: These are special constants.
      captures:
        1: keyword.other.powershell
        2: constant.language.powershell
    - match: (\$)(?i:(Error|ExecutionContext|Host|Home|PID|PsHome|PsVersionTable|ShellID))\b
      comment: These are the other built-in constants.
      captures:
        1: keyword.other.powershell
        2: support.constant.variable.powershell
        3: entity.name.function.invocation.powershell
    - match: (\$)(?i:(\$|\^|\?|_|Args|ConsoleFileName|Event|EventArgs|EventSubscriber|ForEach|Input|LastExitCode|Matches|MyInvocation|NestedPromptLevel|Profile|PSBoundParameters|PsCmdlet|PsCulture|PSDebugContext|PSItem|PSCommandPath|PSScriptRoot|PsUICulture|Pwd|Sender|SourceArgs|SourceEventArgs|StackTrace|Switch|This))\b
      comment: Automatic variables are not constants, but they are read-only...
      captures:
        1: keyword.other.powershell
        2: support.variable.automatic.powershell
        3: entity.name.function.invocation.powershell
    - match: (\$)(?i:(ConfirmPreference|DebugPreference|ErrorActionPreference|ErrorView|FormatEnumerationLimit|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount|MaximumHistoryCount|MaximumVariableCount|OFS|OutputEncoding|ProgressPreference|PsCulture|PSDebugContext|PSDefaultParameterValues|PSEmailServer|PSItem|PSModuleAutoloadingPreference|PSSenderInfo|PSSessionApplicationName|PSSessionConfigurationName|PSSessionOption|VerbosePreference|WarningPreference|WhatIfPreference))\b
      comment: Style preference variables as language variables so that they stand out.
      captures:
        1: keyword.other.powershell
        2: variable.language.powershell
        3: entity.name.function.invocation.powershell
    - match: '(?i:(\$|@)(global|local|private|script|using|workflow):((?:\p{L}|\d|_)+))'
      captures:
        1: keyword.other.powershell
        2: storage.modifier.scope.powershell
        3: variable.other.normal.powershell
        4: entity.name.function.invocation.powershell
    - match: '(?i:(\$\{)(global|local|private|script|using|workflow):([^}]*[^}`])(\}))'
      captures:
        1: keyword.other.powershell
        2: storage.modifier.scope.powershell
        3: variable.other.readwrite.powershell
        4: keyword.other.powershell
        5: entity.name.function.invocation.powershell
    - match: '(?i:(\$)((?:\p{L}|\d|_)+:)?((?:\p{L}|\d|_)+))'
      captures:
        1: keyword.other.powershell
        2: support.variable.drive.powershell
        3: variable.other.readwrite.powershell
        4: entity.name.function.invocation.powershell
    - match: '(?i:(\$\{)((?:\p{L}|\d|_)+:)?([^}]*[^}`])(\}))'
      captures:
        1: keyword.other.powershell
        2: support.variable.drive.powershell
        3: variable.other.readwrite.powershell
        4: keyword.other.powershell
        5: entity.name.function.invocation.powershell
